# -*- coding: utf-8 -*-
"""Music Recommendation Engine

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1V3Vxbv_eZjynLnCiveJsdY-PnWCi4KsJ
"""

#Importing pandas library which is  a popular data manipulation and analysis library in Python
import pandas as pd
from google.colab import drive
drive.mount('/content/drive')

# Reading the CSV file
df = pd.read_csv('/content/drive/MyDrive/data.csv')

# Performing data cleaning operations
# For example, first line removing duplicates and  second handling missing values
df = df.drop_duplicates()
df = df.dropna()





#After cleaning saving data to new file in csv,setting index false as to not include it as separate column
df.to_csv('/content/drive/MyDrive/cleaned_file.csv', index=False)

#Applying Naive Bayes Algorithm

from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import accuracy_score

# Load the dataset from Google Drive
file_path = '/content/drive/MyDrive/cleaned_file.csv'
df = pd.read_csv(file_path)

# Split the dataset into features (X) and target (y)
X = df.drop('liked', axis=1)
y = df['liked']

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Naive Bayes classifier and fit it to the training data
naive_bayes = GaussianNB()
naive_bayes.fit(X_train, y_train)

# Make predictions on the testing set
y_pred = naive_bayes.predict(X_test)

# Calculate the accuracy of the classifier
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)

#Applying KNN on our dataset
from sklearn.neighbors import KNeighborsClassifier

# Load the dataset from Google Drive
file_path = '/content/drive/MyDrive/cleaned_file.csv'
df = pd.read_csv(file_path)

# Split the dataset into features (X) and target (y)
X = df.drop('liked', axis=1)
y = df['liked']

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a KNN classifier and fit it to the training data
knn = KNeighborsClassifier()
knn.fit(X_train, y_train)

# Make predictions on the testing set
y_pred = knn.predict(X_test)

# Calculate the accuracy of the classifier
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)

#Applying SVM on our dataset
from sklearn.svm import SVC

# Load the dataset from Google Drive
file_path = '/content/drive/MyDrive/cleaned_file.csv'
df = pd.read_csv(file_path)

# Split the dataset into features (X) and target (y)
X = df.drop('liked', axis=1)
y = df['liked']

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create an SVM classifier and fit it to the training data
svm = SVC()
svm.fit(X_train, y_train)

# Make predictions on the testing set
y_pred = svm.predict(X_test)

# Calculate the accuracy of the classifier
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)

#Applying decision tree
# Import necessary libraries
from sklearn.tree import DecisionTreeClassifier
# Load the dataset from Google Drive
file_path = '/content/drive/MyDrive/cleaned_file.csv'  # Update with your dataset path
df = pd.read_csv(file_path)

# Split the dataset into features (X) and target (y)
X = df.drop('liked', axis=1)  # Replace 'liked' with your actual target column name
y = df['liked']

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Decision Tree classifier and fit it to the training data
decision_tree = DecisionTreeClassifier()
decision_tree.fit(X_train, y_train)

# Make predictions on the testing set
y_pred = decision_tree.predict(X_test)
# Calculate the accuracy of the classifier
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)

# Load the dataset
file_path = '/content/drive/MyDrive/cleaned_file.csv'
df = pd.read_csv(file_path)

# Split the dataset into features (X) and target (y)
X = df.drop('liked', axis=1)
y = df['liked']

# Create a Decision Tree classifier
classifier = DecisionTreeClassifier()

# Train the classifier
classifier.fit(X, y)

# Define new input data
new_data = pd.DataFrame({
    'danceability': [0.803],
    'energy': [0.624],
    'key': [7],
    'loudness': [-6.764],
    'mode': [0],
    'speechiness': [0.0477],
    'acousticness': [0.451],
    'instrumentalness': [0.00073],
    'liveness': [0.1],
    'valence': [0.628],
    'tempo': [95.968],
    'duration_ms': [304524],
    'time_signature': [4]
})

# Make predictions on the new input data
predictions = classifier.predict(new_data)

print("Predictions:", predictions)

# Load the dataset
file_path = '/content/drive/MyDrive/cleaned_file.csv'
df = pd.read_csv(file_path)

# Split the dataset into features (X) and target (y)
X = df.drop('liked', axis=1)
y = df['liked']

# Create a Decision Tree classifier
classifier = DecisionTreeClassifier()

# Train the classifier
classifier.fit(X, y)

# Define new input data
new_data = pd.DataFrame({
    'danceability': [0.762],
    'energy': [0.703],
    'key': [10],
    'loudness': [-7.951],
    'mode': [0],
    'speechiness': [0.306],
    'acousticness': [0.206],
    'instrumentalness': [0],
    'liveness': [0.0912],
    'valence': [0.519],
    'tempo': [151.329],
    'duration_ms': [247178],
    'time_signature': [4]

})

# Make predictions on the new input data
predictions = classifier.predict(new_data)

print("Predictions:", predictions)

# Load the dataset
file_path = '/content/drive/MyDrive/cleaned_file.csv'
df = pd.read_csv(file_path)

# Split the dataset into features (X) and target (y)
X = df.drop('liked', axis=1)
y = df['liked']

# Create a Decision Tree classifier
classifier = DecisionTreeClassifier()

# Train the classifier
classifier.fit(X, y)

# Define new input data
new_data = pd.DataFrame({
    'danceability': [0.65],
    'energy': [0.78],
    'key': [2],
    'loudness': [-4.2],
    'mode': [1],
    'speechiness': [0.12],
    'acousticness': [0.32],
    'instrumentalness': [0.005],
    'liveness': [0.56],
    'valence': [0.82],
    'tempo': [120.5],
    'duration_ms': [245000],
    'time_signature': [4]

})

# Make predictions on the new input data
predictions = classifier.predict(new_data)

print("Predictions:", predictions)

# Load the dataset
file_path = '/content/drive/MyDrive/cleaned_file.csv'
df = pd.read_csv(file_path)

# Split the dataset into features (X) and target (y)
X = df.drop('liked', axis=1)
y = df['liked']

# Create a Decision Tree classifier
classifier = DecisionTreeClassifier()

# Train the classifier
classifier.fit(X, y)

# Define new input data
new_data = pd.DataFrame({
    'danceability': [0.34],
    'energy': [0.98],
    'key': [3],
    'loudness': [-7.3],
    'mode': [1],
    'speechiness': [0.23],
    'acousticness': [0.54],
    'instrumentalness': [0.003],
    'liveness': [0.12],
    'valence': [0.82],
    'tempo': [120.5],
    'duration_ms': [245000],
    'time_signature': [4]

})

# Make predictions on the new input data
predictions = classifier.predict(new_data)

print("Predictions:", predictions)

# Load the dataset
file_path = '/content/drive/MyDrive/cleaned_file.csv'
df = pd.read_csv(file_path)

# Split the dataset into features (X) and target (y)
X = df.drop('liked', axis=1)
y = df['liked']

# Create a Decision Tree classifier
classifier = DecisionTreeClassifier()

# Train the classifier
classifier.fit(X, y)

# Define new input data
new_data = pd.DataFrame({
    'danceability': [0.34],
    'energy': [0.98],
    'key': [3],
    'loudness': [-7.3],
    'mode': [1],
    'speechiness': [0.23],
    'acousticness': [0.54],
    'instrumentalness': [0.003],
    'liveness': [0.12],
    'valence': [0.82],
    'tempo': [120.5],
    'duration_ms': [245000],
    'time_signature': [4]

})

# Make predictions on the new input data
predictions = classifier.predict(new_data)

print("Predictions:", predictions)

# Load the dataset
file_path = '/content/drive/MyDrive/cleaned_file.csv'
df = pd.read_csv(file_path)

# Split the dataset into features (X) and target (y)
X = df.drop('liked', axis=1)
y = df['liked']

# Create a Decision Tree classifier
classifier = DecisionTreeClassifier()

# Train the classifier
classifier.fit(X, y)

# Define new input data
new_data = pd.DataFrame({
    'danceability': [0.34],
    'energy': [0.98],
    'key': [3],
    'loudness': [-7.3],
    'mode': [1],
    'speechiness': [0.23],
    'acousticness': [0.54],
    'instrumentalness': [0.003],
    'liveness': [0.12],
    'valence': [0.82],
    'tempo': [120.5],
    'duration_ms': [245000],
    'time_signature': [4]

})

# Make predictions on the new input data
predictions = classifier.predict(new_data)

print("Predictions:", predictions)



# Load the dataset
file_path = '/content/drive/MyDrive/cleaned_file.csv'
df = pd.read_csv(file_path)

# Split the dataset into features (X) and target (y)
X = df.drop('liked', axis=1)
y = df['liked']

# Create a Decision Tree classifier
classifier = DecisionTreeClassifier()

# Train the classifier
classifier.fit(X, y)

# Define new input data
new_data = pd.DataFrame({
    'danceability': [0.34],
    'energy': [0.98],
    'key': [3],
    'loudness': [-7.3],
    'mode': [1],
    'speechiness': [0.23],
    'acousticness': [0.54],
    'instrumentalness': [0.003],
    'liveness': [0.12],
    'valence': [0.82],
    'tempo': [120.5],
    'duration_ms': [245000],
    'time_signature': [4]

})

# Make predictions on the new input data
predictions = classifier.predict(new_data)

print("Predictions:", predictions)